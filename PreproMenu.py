# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PreproMenu.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import nltk
import string
import re
import pandas as pd
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QAbstractTableModel, Qt
import subprocess
from pathlib import Path

# from PyQt5.QtWidgets import QDialog, QApplication, QFileDialog

filename = 'kosong'
print(filename)


class Ui_pre(object):
    def tabelmenu(self):
        cmd = 'MenuTable.py'
        p = subprocess.Popen(cmd, shell=True)
        out, err = p.communicate()
        print(err)
        print(out)

    def browser(self):
        global filename
        qfd = QtWidgets.QFileDialog()
        path = "C:"
        filter = "csv(*.csv)"
        fname = QtWidgets.QFileDialog.getOpenFileName(
            qfd, 'Open File', path, filter)
        filename = fname[0]
        print(filename)
        file_path = filename
        file_name = Path(file_path).stem
        print(file_name)
        self.label_2.setText(file_name+'.csv')
        return fname

    def preproses(self):
        print(filename)
        filecsv = filename
        data = pd.read_csv(filecsv, header=0, usecols=[
                           'sentiment', 'Content'], delimiter=',', encoding='utf-8')
        data_clean = pd.DataFrame(data)
        #data_clean = data_clean['sentiment']==0.0
        data_clean.drop([0, 1], axis=0, inplace=True)
        ata_clean = data_clean[data_clean.sentiment != 0.0]
        data_clean.to_csv('data_clean1.csv', index=False)
        data_clean = pd.read_csv('data_clean1.csv', encoding='latin1')
        data_clean.drop_duplicates(subset="Content", keep=False, inplace=True)
        data_clean.to_csv('data_clean22.csv', index=False)
        data_clean = pd.read_csv('data_clean22.csv', encoding='latin1')
        print(data_clean)
        # case folding

        def casefolding(Content):
            Content = Content.lower()
            Content = Content.strip(" ")
            Content = re.sub(r"\d+", "", Content)
            Content = re.sub(r"\b[a-zA-Z]\b", "", Content)
            Content = re.sub(r'(:\s?\(|:-\(|\)\s?:|\)-:)', '', Content)
            Content = re.sub("@[A-Za-z0-9]+", "", Content)  # Remove @ sign
            Content = re.sub(r"(?:\@|http?\://|https?\://|www)\S+",
                             "", Content)  # Remove http links
            Content = ' '.join(
                re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", Content).split())
            Content = " ".join(Content.split())
            Content = Content.replace("#", "").replace("_", " ")
            return Content
        data_clean['Content'] = data_clean['Content'].apply(casefolding)
        print(data_clean.head(10))

        # proses Token
        def token(Content):
            nstr = Content.split(' ')
            dat = []
            a = -1
            for hu in nstr:
                a = a+1
            if hu == '':
                dat.append(a)
            p = 0
            b = 0
            for q in dat:
                b = q-p
                del nstr[b]
                p = p+1
            return nstr
        data_clean['Content'] = data_clean['Content'].apply(token)
        print(data_clean.head(10))

        # proses Normalisasi #pip install xlrd=module .xls
        normalizad_word = pd.read_excel("normal.xls")
        normalizad_word_dict = {}
        for index, row in normalizad_word.iterrows():
            if row[0] not in normalizad_word_dict:
                normalizad_word_dict[row[0]] = row[1]

        def normalized_term(document):
            return [normalizad_word_dict[term] if term in normalizad_word_dict else term for term in document]
        data_clean['Content'] = data_clean['Content'].apply(normalized_term)
        data_clean.head(10)

        # proses filtering
        import nltk
        # nltk.download('stopwords')
        from nltk.corpus import stopwords

        def stopword_removal(Content):
            filtering = stopwords.words('indonesian')
            filtering.extend(["yg", "dg", "rt", "dgn", "ny", "d", 'klo',
                              'kalo', 'amp', 'biar', 'bikin', 'bilang',
                              'gak', 'ga', 'krn', 'nya', 'nih', 'sih',
                              'si', 'tau', 'tdk', 'tuh', 'utk', 'ya',
                              'jd', 'jgn', 'sdh', 'aja', 'n', 't',
                              'nyg', 'hehe', 'pen', 'u', 'nan', 'loh', 'rt',
                              '&amp', 'yah', 'td', 'trs', 'euy', 'jg', 'gue', 'pa', 'je', 'az'])
            x = []
            data = []

            def myFunc(x):
                if x in filtering:
                    return False
                else:
                    return True
            fit = filter(myFunc, Content)
            for x in fit:
                data.append(x)
            return data
        data_clean['Content'] = data_clean['Content'].apply(stopword_removal)
        print(data_clean.head(10))

        # proses stemming
        from sklearn.pipeline import Pipeline
        from Sastrawi.Stemmer.StemmerFactory import StemmerFactory

        def stemming(Content):
            factory = StemmerFactory()
            stemmer = factory.create_stemmer()
            do = []
            for w in Content:
                dt = stemmer.stem(w)
                do.append(dt)
            d_clean = []
            d_clean = " ".join(do)
            print(d_clean)
            return d_clean
        data_clean['Content'] = data_clean['Content'].apply(stemming)
        data_clean.to_csv('data_clean1steam.csv', index=False)
        data_clean = pd.read_csv('data_clean1steam.csv', encoding='latin1')

        # Clean Duplicate
        data_clean = pd.read_csv('data_clean1steam.csv', encoding='latin1')
        print(data_clean)
        data_clean.drop_duplicates(subset="Content", keep=False, inplace=True)
        print(data_clean)
        data_clean.to_csv('data_clean22.csv', index=False)
        data_clean = pd.read_csv('data_clean22.csv', encoding='latin1')
        print(data_clean)

        # Labelling
        def senti(sentiment):
            if sentiment >= 0.0:
                return 'positif'
            else:
                return 'negatif'
        data_clean['senti'] = data_clean['sentiment'].apply(senti)
        data_clean.to_csv('data_clean.csv', index=False)
        data_clean = pd.read_csv('data_clean.csv', encoding='latin1')
        data_clean.head(10)
        self.label_3.setText('Selesai !')

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(257, 280)
        font = QtGui.QFont()
        font.setPointSize(8)
        Form.setFont(font)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(80, 50, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.toolButton = QtWidgets.QToolButton(Form)
        self.toolButton.setGeometry(QtCore.QRect(170, 100, 61, 20))
        self.toolButton.setObjectName("toolButton")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(90, 100, 81, 16))
        self.label_2.setObjectName("label_2")
        self.line = QtWidgets.QFrame(Form)
        self.line.setGeometry(QtCore.QRect(30, 110, 201, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(Form)
        self.line_2.setGeometry(QtCore.QRect(30, 30, 201, 41))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(Form)
        self.line_3.setGeometry(QtCore.QRect(20, 50, 20, 71))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(60, 140, 151, 31))
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(160, 180, 71, 16))
        self.label_3.setObjectName("label_3")
        self.line_5 = QtWidgets.QFrame(Form)
        self.line_5.setGeometry(QtCore.QRect(30, 200, 201, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(60, 220, 131, 21))
        self.pushButton_2.setObjectName("pushButton_2")
        self.line_6 = QtWidgets.QFrame(Form)
        self.line_6.setGeometry(QtCore.QRect(30, 120, 201, 20))
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.line_7 = QtWidgets.QFrame(Form)
        self.line_7.setGeometry(QtCore.QRect(20, 50, 20, 191))
        self.line_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.line_8 = QtWidgets.QFrame(Form)
        self.line_8.setGeometry(QtCore.QRect(220, 50, 20, 191))
        self.line_8.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(40, 100, 51, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(50, 10, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.line_9 = QtWidgets.QFrame(Form)
        self.line_9.setGeometry(QtCore.QRect(-10, 20, 281, 41))
        self.line_9.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")
        self.line_10 = QtWidgets.QFrame(Form)
        self.line_10.setGeometry(QtCore.QRect(0, -10, 281, 41))
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(40, 180, 131, 16))
        self.label_6.setObjectName("label_6")
        self.line_11 = QtWidgets.QFrame(Form)
        self.line_11.setGeometry(QtCore.QRect(30, 210, 201, 20))
        self.line_11.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_11.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_11.setObjectName("line_11")
        self.line_12 = QtWidgets.QFrame(Form)
        self.line_12.setGeometry(QtCore.QRect(30, 230, 201, 31))
        self.line_12.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_12.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_12.setObjectName("line_12")
        self.line_4 = QtWidgets.QFrame(Form)
        self.line_4.setGeometry(QtCore.QRect(30, 70, 201, 16))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_13 = QtWidgets.QFrame(Form)
        self.line_13.setGeometry(QtCore.QRect(0, 250, 261, 41))
        self.line_13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_13.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_13.setObjectName("line_13")
        self.line_12.raise_()
        self.line_8.raise_()
        self.line_7.raise_()
        self.line.raise_()
        self.line_6.raise_()
        self.line_11.raise_()
        self.line_5.raise_()
        self.line_9.raise_()
        self.line_10.raise_()
        self.label.raise_()
        self.toolButton.raise_()
        self.label_2.raise_()
        self.line_2.raise_()
        self.line_3.raise_()
        self.pushButton.raise_()
        self.label_3.raise_()
        self.pushButton_2.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.line_4.raise_()
        self.line_13.raise_()

        self.toolButton.clicked.connect(self.browser)
        self.pushButton.clicked.connect(self.preproses)
        self.pushButton_2.clicked.connect(self.tabelmenu)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Upload File CSV"))
        self.toolButton.setText(_translate("Form", "Select File"))
        self.label_2.setText(_translate("Form", " "))
        self.pushButton.setText(_translate(
            "Form", "Mulai Proses Preprocessing"))
        self.label_3.setText(_translate("Form", " "))
        self.pushButton_2.setText(_translate(
            "Form", "Lihat Hasil Preprocessing"))
        self.label_4.setText(_translate("Form", "Filename : "))
        self.label_5.setText(_translate("Form", " Preprocessing Menu"))
        self.label_6.setText(_translate("Form", "Proses Preprocessing : "))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_pre()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
